<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Blog</title><link>https://vinosa.github.io/blog/</link><description>Recent content in Posts on Blog</description><generator>Hugo -- 0.139.4</generator><language>en-us</language><lastBuildDate>Tue, 10 Dec 2024 14:26:42 +0100</lastBuildDate><atom:link href="https://vinosa.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>My Doctrine Design Patterns</title><link>https://vinosa.github.io/blog/posts/doctrine-design-patterns/</link><pubDate>Tue, 10 Dec 2024 14:26:42 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/doctrine-design-patterns/</guid><description>&lt;h1 id="my-custom-doctrine-design-patterns">My custom Doctrine Design Patterns&lt;/h1>
&lt;h2 id="entity-workflow-control-with-decorators">Entity workflow control with Decorators&lt;/h2>
&lt;h3 id="orm-entity">ORM entity&lt;/h3>
&lt;pre tabindex="0">&lt;code>use Doctrine\ORM\EntityManagerInterface;
class PostEntity implements Post
{
public function save(EntityManagerInterface $entityManager): Post
{
$entityManager-&amp;gt;persist($this-&amp;gt;entity());
$entityManager-&amp;gt;flush();
return $this-&amp;gt;act();
}
public function entity(): PostEntity
{
return $this;
}
public function act(): Post
{
return new Done($this);
}
}
&lt;/code>&lt;/pre>&lt;h3 id="workflow-state-decorator">Workflow State Decorator&lt;/h3>
&lt;pre tabindex="0">&lt;code>
class Approved implements Post
{
private $origin;
public function __construct(
Post $origin
) {
$this-&amp;gt;origin = $origin;
}
public function save(EntityManagerInterface $entityManager): Post
{
$entityManager-&amp;gt;persist($this-&amp;gt;entity());
$entityManager-&amp;gt;flush();
return $this-&amp;gt;act();
}
public function entity(): PostEntity
{
return $this-&amp;gt;origin-&amp;gt;entity()-&amp;gt;approved();
}
public function act(): Post
{
$this-&amp;gt;origin-&amp;gt;act();
/**
* new state subsequent workflow code
*/
return new Done($this);
}
}
&lt;/code>&lt;/pre>&lt;h3 id="disabling-decorator-ensures-workflow-is-ran-only-once-by-an-object">&amp;lsquo;Disabling&amp;rsquo; decorator (ensures workflow is ran only once by an object)&lt;/h3>
&lt;pre tabindex="0">&lt;code>
class Done implements Post
{
private $origin;
public function __construct(
Post $origin
) {
$this-&amp;gt;origin = $origin;
}
public function save(EntityManagerInterface $entityManager): Post
{
return $this;
}
public function entity(): PostEntity
{
return $this-&amp;gt;origin-&amp;gt;entity();
}
public function act(): Post
{
return $this;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="entities-filtering-from-database-or-memory">Entities filtering from database or memory&lt;/h2>
&lt;h3 id="filter-class">Filter class&lt;/h3>
&lt;pre tabindex="0">&lt;code>use Doctrine\ORM\QueryBuilder;
class Approved implements Filter
{
public function query(QueryBuilder $queryBuilder): QueryBuilder
{
return $queryBuilder
-&amp;gt;andWhere(&amp;#39;p.status = :status&amp;#39;)
-&amp;gt;setParameter(&amp;#39;status&amp;#39;, (new PostStatuses())-&amp;gt;approved() );
}
public function item(Post $item): bool
{
return $item-&amp;gt;entity()-&amp;gt;isApproved();
}
}
&lt;/code>&lt;/pre>&lt;h3 id="array-entities-source">Array entities source&lt;/h3>
&lt;pre tabindex="0">&lt;code>
class ArrayPosts implements Posts
{
private $items;
private $filters;
public function __construct(
array $items
) {
$this-&amp;gt;items = $items;
$this-&amp;gt;filters = [];
}
public function toArray(): array
{
return array_filter(
$this-&amp;gt;items,
function (Post $item)
{
return array_reduce(
$this-&amp;gt;filters,
function(bool $take, Filter $filter) use ($item)
{
return $take &amp;amp;&amp;amp; $filter-&amp;gt;item($item);
},
true
);
}
);
}
public function filter(Filter $filter): Posts
{
$new = clone $this;
$new-&amp;gt;filters[] = $filter;
return $new;
}
}
&lt;/code>&lt;/pre>&lt;h3 id="database-entities-source">Database entities source&lt;/h3>
&lt;pre tabindex="0">&lt;code>
class DatabasePosts implements Posts
{
private $entityManager;
private $filters;
public function __construct(
EntityManagerInterface $entityManagerInterface
) {
$this-&amp;gt;entityManager = $entityManagerInterface;
$this-&amp;gt;filters = [];
}
public function toArray(): array
{
$qb = $this-&amp;gt;entityManager-&amp;gt;createQueryBuilder();
$qb-&amp;gt;select(&amp;#39;p&amp;#39;)-&amp;gt;from(PostEntity::class, &amp;#39;p&amp;#39;);
$qb = array_reduce(
$this-&amp;gt;filters,
function (QueryBuilder $queryBuilder, Filter $filter) {
return $filter-&amp;gt;query($queryBuilder);
},
$qb
);
return $qb
-&amp;gt;getQuery()
-&amp;gt;getResult();
}
public function filter(Filter $filter): Posts
{
$new = clone $this;
$new-&amp;gt;filters[] = $filter;
return $new;
}
}
&lt;/code>&lt;/pre></description></item><item><title>Docker Network</title><link>https://vinosa.github.io/blog/posts/docker-network/</link><pubDate>Tue, 13 Aug 2024 09:53:37 +0200</pubDate><guid>https://vinosa.github.io/blog/posts/docker-network/</guid><description>&lt;h1 id="docker-network">Docker Network&lt;/h1>
&lt;h3 id="list">List&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker network ls
&lt;/code>&lt;/pre>&lt;h3 id="inspect">Inspect&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker network inspect &amp;lt;network&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="container-info">Container info&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker container port &amp;lt;container&amp;gt;
docker container inspect --format &amp;#39;{{.NetworkSettings.IpAddress}}&amp;#39; &amp;lt;container&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="create-custom-network">Create custom network&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker network create &amp;lt;network&amp;gt;
docker container run --name &amp;lt;container&amp;gt; --network &amp;lt;network&amp;gt; -d &amp;lt;container&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="connect-to-container">Connect to container&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker network connect &amp;lt;network&amp;gt; &amp;lt;container&amp;gt;
docker network disconnect &amp;lt;network&amp;gt; &amp;lt;container&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Docker Containers</title><link>https://vinosa.github.io/blog/posts/docker-containers/</link><pubDate>Tue, 13 Aug 2024 09:51:42 +0200</pubDate><guid>https://vinosa.github.io/blog/posts/docker-containers/</guid><description>&lt;h1 id="docker-containers">Docker Containers&lt;/h1>
&lt;h2 id="info">Info&lt;/h2>
&lt;h3 id="list">List&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker container ls -a
&lt;/code>&lt;/pre>&lt;h3 id="inspect">Inspect&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker container inspect &amp;lt;name/id&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="print-env-vars">Print Env Vars&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker exec &amp;lt;container&amp;gt; printenv
docker exec &amp;lt;container&amp;gt; /usr/bin/env
&lt;/code>&lt;/pre>&lt;h3 id="logs">Logs&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker container logs -f --details &amp;lt;container&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="ip-ranges">IP ranges&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker inspect &amp;lt;container&amp;gt; | grep IPv4Address
&lt;/code>&lt;/pre>&lt;h2 id="createrun">Create/run&lt;/h2>
&lt;pre tabindex="0">&lt;code>docker container run [OPTIONS] --name &amp;lt;container&amp;gt; &amp;lt;image:tag&amp;gt;
docker container run -it --name ubuntu_22 -d ubuntu:22.04
docker run -d -p 3306:3306 --name mybd --env &amp;#34;MYSQL_RANDOM_ROOT_PASSWORD=yes&amp;#34; mysql
&lt;/code>&lt;/pre>&lt;h3 id="options">Options&lt;/h3>
&lt;pre tabindex="0">&lt;code>--publish &amp;lt;host-port:container-port&amp;gt; // port binding
--name &amp;lt;container-name&amp;gt;
-d // --detach
-v &amp;lt;volume-name:path-on-container&amp;gt; ex: mysql-db:/var/lib/mysql
-e &amp;lt;environment-variable=value&amp;gt;
--help
&lt;/code>&lt;/pre>&lt;h3 id="shell">Shell&lt;/h3>
&lt;p>&lt;em>Ctrl + D for exit&lt;/em>&lt;/p></description></item><item><title>Docker Images</title><link>https://vinosa.github.io/blog/posts/docker-images/</link><pubDate>Tue, 13 Aug 2024 09:49:08 +0200</pubDate><guid>https://vinosa.github.io/blog/posts/docker-images/</guid><description>&lt;h1 id="docker-images">Docker Images&lt;/h1>
&lt;h3 id="list">List&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker images ls
&lt;/code>&lt;/pre>&lt;h3 id="run">Run&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker run -p 13000:8080 &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="show-layers">Show Layers&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker image history &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="inspect">Inspect&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker image inspect &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="build-from-dockerfile">Build from Dockerfile&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker build -t &amp;lt;image&amp;gt; .
docker build -t &amp;lt;image&amp;gt; -f Dockerfile-tasks .
&lt;/code>&lt;/pre>&lt;h3 id="publish-on-docker-hub">Publish on Docker Hub&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker image tag &amp;lt;image-source:tag&amp;gt; &amp;lt;vendor/image-target:tag&amp;gt;
docker image ls
docker login
cat .docker/config.json
docker image push &amp;lt;image&amp;gt;
docker logout
&lt;/code>&lt;/pre></description></item><item><title>Dockerfile</title><link>https://vinosa.github.io/blog/posts/dockerfile/</link><pubDate>Mon, 12 Aug 2024 14:43:29 +0200</pubDate><guid>https://vinosa.github.io/blog/posts/dockerfile/</guid><description>&lt;h2 id="mandatory-parameters">Mandatory parameters&lt;/h2>
&lt;h3 id="from">FROM&lt;/h3>
&lt;pre tabindex="0">&lt;code>FROM &amp;lt;image source&amp;gt;
FROM scratch
&lt;/code>&lt;/pre>&lt;h3 id="env">ENV&lt;/h3>
&lt;pre tabindex="0">&lt;code>ENV MY_VARIABLE &amp;#34;value&amp;#34;
&lt;/code>&lt;/pre>&lt;h3 id="run">RUN&lt;/h3>
&lt;pre tabindex="0">&lt;code>RUN apt-get update &amp;amp;&amp;amp; aptÃ¨-get install nginx curl -y
&lt;/code>&lt;/pre>&lt;h3 id="expose-port">EXPOSE PORT&lt;/h3>
&lt;pre tabindex="0">&lt;code>EXPOSE 80 443
&lt;/code>&lt;/pre>&lt;h3 id="exec-command">EXEC COMMAND&lt;/h3>
&lt;pre tabindex="0">&lt;code>CMD [&amp;#34;nginx&amp;#34;, &amp;#34;-g&amp;#34;, &amp;#34;daemon off;&amp;#34;]
&lt;/code>&lt;/pre></description></item><item><title>Hugo Templating</title><link>https://vinosa.github.io/blog/posts/hugo-templating/</link><pubDate>Tue, 19 Mar 2024 11:31:59 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/hugo-templating/</guid><description>&lt;h3 id="common-layout">Common layout&lt;/h3>
&lt;p>in baseof.html :&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ block &amp;#34;main&amp;#34; . }}
{{end}}
&lt;/code>&lt;/pre>&lt;p>In single.html or list.html :&lt;/p>
&lt;pre tabindex="0">&lt;code>{{define &amp;#34;main&amp;#34; }}
bla bla
{{end}}
&lt;/code>&lt;/pre>&lt;h3 id="variables">Variables&lt;/h3>
&lt;pre tabindex="0">&lt;code>&amp;lt;title&amp;gt;{{ .Title } {.Content}&amp;lt;/title&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="custom-variables">Custom variables&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{ $address := &amp;#34;123 Main St.&amp;#34; }}
{{ $address }}
&lt;/code>&lt;/pre>&lt;h3 id="including-partial-templates">Including partial templates&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{ partial &amp;#34;header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;h3 id="foreach">Foreach&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{ range $elem_index, $elem_val := $array }}
{{ $elem_index }} -- {{ $elem_val }}
{{ end }}
{{ range $elem_key, $elem_val := $map }}
{{ $elem_key }} -- {{ $elem_val }}
{{ end }}
&lt;/code>&lt;/pre>&lt;h3 id="with-if-exists">With (if exists)&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{ with .Params.title }}
&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;
{{ else }}
{{ .Summary }}
{{ end }}
&lt;/code>&lt;/pre>&lt;h3 id="global-context">Global context&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{ $title := .Site.Title }}
&amp;lt;ul&amp;gt;
{{ range .Params.tags }}
&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;#34;/tags/{{ . | urlize }}&amp;#34;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;
- {{ $.Site.Title }}
&amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="removing-white-space">Removing white space&lt;/h3>
&lt;pre tabindex="0">&lt;code>&amp;lt;div&amp;gt;
{{- .Title -}}
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Hugo Shortcodes</title><link>https://vinosa.github.io/blog/posts/hugo-shortcodes/</link><pubDate>Tue, 19 Mar 2024 11:24:31 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/hugo-shortcodes/</guid><description>&lt;h3 id="html-snippets">HTML snippets&lt;/h3>
&lt;p>&lt;a href="https://gohugo.io/content-management/shortcodes/">https://gohugo.io/content-management/shortcodes/&lt;/a>&lt;/p>
&lt;h3 id="youtube">Youtube&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; youtube 2xkNJL4gJ9E &amp;gt;}}
&lt;/code>&lt;/pre>&lt;h3 id="custom-shortcodes">Custom shortcodes&lt;/h3>
&lt;p>layouts/shortcodes/myshortcode.html&lt;/p>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; myshortcode &amp;gt;}}
&lt;/code>&lt;/pre></description></item><item><title>Hugo Files</title><link>https://vinosa.github.io/blog/posts/hugo-files/</link><pubDate>Tue, 19 Mar 2024 11:23:16 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/hugo-files/</guid><description>&lt;h3 id="list--single-template">List &amp;amp; single template&lt;/h3>
&lt;pre tabindex="0">&lt;code>layouts/_default/list.html / single.html
&lt;/code>&lt;/pre>&lt;h3 id="home-page">Home page&lt;/h3>
&lt;pre tabindex="0">&lt;code>layouts/index.html
&lt;/code>&lt;/pre>&lt;h3 id="common-layout">Common layout&lt;/h3>
&lt;pre tabindex="0">&lt;code>layouts/_default/baseof.html
&lt;/code>&lt;/pre>&lt;h3 id="section-templates">Section templates&lt;/h3>
&lt;pre tabindex="0">&lt;code>layouts/mysection/single.html // mysection same directory name as in content
&lt;/code>&lt;/pre>&lt;h3 id="data-files">Data files&lt;/h3>
&lt;pre tabindex="0">&lt;code>data/states.json
&lt;/code>&lt;/pre></description></item><item><title>Hugo Commands</title><link>https://vinosa.github.io/blog/posts/hugo-commands/</link><pubDate>Tue, 19 Mar 2024 11:20:16 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/hugo-commands/</guid><description>&lt;h3 id="install">Install&lt;/h3>
&lt;pre tabindex="0">&lt;code>snap install hugo --channel=extended
or
sudo apt-get install hugo
&lt;/code>&lt;/pre>&lt;h3 id="test-installation">Test installation&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo help
&lt;/code>&lt;/pre>&lt;h3 id="create-new-site">Create new site&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo new site &amp;lt;site&amp;gt; -f yml
hugo new site --force . // in existing repository folder
&lt;/code>&lt;/pre>&lt;h3 id="add-a-new-theme">Add a new theme&lt;/h3>
&lt;pre tabindex="0">&lt;code>cd quickstart
git init
git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;/code>&lt;/pre>&lt;h3 id="add-some-content">Add some content&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo new posts/my-first-post.md
&lt;/code>&lt;/pre>&lt;h3 id="add-folder-root">Add folder root&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo new notes/history/_index.md
&lt;/code>&lt;/pre>&lt;h3 id="start-hugo-server-with-drafts-enabled">Start Hugo Server (with drafts enabled)&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo server -D --navigateToChanged // http://localhost:1313/
&lt;/code>&lt;/pre>&lt;h3 id="deploy-to-public-folder">Deploy (to public folder)&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo
&lt;/code>&lt;/pre>&lt;h3 id="force-stop-server">Force Stop server&lt;/h3>
&lt;pre tabindex="0">&lt;code> killall -9 hugo
&lt;/code>&lt;/pre>&lt;h3 id="build-static-pages">Build static pages&lt;/h3>
&lt;pre tabindex="0">&lt;code>hugo -D
&lt;/code>&lt;/pre></description></item><item><title>Docker Compose</title><link>https://vinosa.github.io/blog/posts/docker-compose/</link><pubDate>Tue, 19 Mar 2024 10:48:33 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/docker-compose/</guid><description>&lt;h2 id="install">Install&lt;/h2>
&lt;pre tabindex="0">&lt;code>sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
&lt;/code>&lt;/pre>&lt;h3 id="build--run-docker-compose">Build &amp;amp; run Docker-compose&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker-compose up --build
&lt;/code>&lt;/pre>&lt;h3 id="get-running-docker-compose-folder">Get running docker compose folder&lt;/h3>
&lt;pre tabindex="0">&lt;code> docker inspect &amp;lt;container-name&amp;gt; | grep &amp;#34;com.docker.compose.project.working_dir&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>Git Troubleshooting</title><link>https://vinosa.github.io/blog/posts/git-troubleshooting/</link><pubDate>Thu, 15 Jun 2023 14:49:22 +0200</pubDate><guid>https://vinosa.github.io/blog/posts/git-troubleshooting/</guid><description>&lt;h3 id="fatal-transport-file-not-allowed">fatal: transport &amp;lsquo;file&amp;rsquo; not allowed&lt;/h3>
&lt;pre tabindex="0">&lt;code>git config --global protocol.file.allow always
&lt;/code>&lt;/pre></description></item><item><title>Git Tips</title><link>https://vinosa.github.io/blog/posts/git-tips/</link><pubDate>Tue, 13 Jun 2023 14:43:15 +0200</pubDate><guid>https://vinosa.github.io/blog/posts/git-tips/</guid><description>&lt;h3 id="move-last-2-commits-from-master-to-develop">Move last 2 commits from master to develop&lt;/h3>
&lt;pre tabindex="0">&lt;code>git checkout master
git branch -d develop
git log
git reset --hard HEAD~2
git checkout &amp;lt;sha1_of_last_orphan_commit&amp;gt;
git checkout -b develop
&lt;/code>&lt;/pre>&lt;h3 id="correct-master-branched-to-develop">Correct master branched to develop&lt;/h3>
&lt;pre tabindex="0">&lt;code>git checkout develop
git log
git reset --hard HEAD~1
git checkout master
git reset --hard &amp;lt;sha1_orphan_merge_commit&amp;gt;
git comit --amend // rename commit
&lt;/code>&lt;/pre>&lt;h3 id="search-bugged-commit">Search bugged commit&lt;/h3>
&lt;pre tabindex="0">&lt;code>git bisect start
// define borders
git bisect good [ref] // bug is not present
git bisect bad [ref] // bug is present
git bisect good/bad // if bug is present
...
or
git bisect run ./test.sh (script returns 0 for good, or anything else for bad)
git bisect reset
&lt;/code>&lt;/pre>&lt;h3 id="init-server-repository">Init server repository&lt;/h3>
&lt;pre tabindex="0">&lt;code>git init --bare
&lt;/code>&lt;/pre>&lt;h2 id="hooks">Hooks&lt;/h2>
&lt;h3 id="local">Local&lt;/h3>
&lt;ul>
&lt;li>pre-commit&lt;/li>
&lt;li>prepare-commit-msg&lt;/li>
&lt;li>commit-msg&lt;/li>
&lt;li>post-commit&lt;/li>
&lt;li>post-checkout&lt;/li>
&lt;li>pre-rebase&lt;/li>
&lt;/ul>
&lt;h3 id="server">Server&lt;/h3>
&lt;ul>
&lt;li>pre-receive // on push&lt;/li>
&lt;li>update&lt;/li>
&lt;li>post-receive // notification, ci etc&lt;/li>
&lt;/ul></description></item><item><title>Linux Troubleshooting</title><link>https://vinosa.github.io/blog/posts/linux-troubleshooting/</link><pubDate>Mon, 06 Feb 2023 10:10:09 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/linux-troubleshooting/</guid><description>Some Linux troubleshooting</description></item><item><title>Linux Commands</title><link>https://vinosa.github.io/blog/posts/linux-commands/</link><pubDate>Mon, 06 Feb 2023 09:57:19 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/linux-commands/</guid><description>Some Linux commands</description></item><item><title>Docker Tips</title><link>https://vinosa.github.io/blog/posts/docker-tips/</link><pubDate>Tue, 31 Jan 2023 14:32:31 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/docker-tips/</guid><description>Miscellaneous Docker tips</description></item><item><title>Git Commands</title><link>https://vinosa.github.io/blog/posts/git-commands/</link><pubDate>Tue, 31 Jan 2023 09:28:24 +0100</pubDate><guid>https://vinosa.github.io/blog/posts/git-commands/</guid><description>Some Git commands</description></item></channel></rss>